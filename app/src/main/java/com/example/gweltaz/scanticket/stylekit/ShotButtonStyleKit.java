package com.example.gweltaz.scanticket.stylekit;

import android.graphics.Paint;
import android.graphics.RectF;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Path;



/**
 * Created by AuthorName on 16 oct. 2017.
 * Copyright Â© 2017 CompanyName. All rights reserved.
 *
 * Generated by PaintCode
 * http://www.paintcodeapp.com
 *
 * @author AuthorName
 */
public class ShotButtonStyleKit {


    // Resizing Behavior
    public enum ResizingBehavior {
        AspectFit, //!< The content is proportionally resized to fit into the target rectangle.
        AspectFill, //!< The content is proportionally resized to completely fill the target rectangle.
        Stretch, //!< The content is stretched to match the entire target rectangle.
        Center, //!< The content is centered in the target rectangle, but it is NOT resized.
    }

    // Canvas Drawings
    // Tab

    private static class CacheForCanvas1 {
        private static RectF originalFrame = new RectF(0f, 0f, 240f, 120f);
        private static RectF resizedFrame = new RectF();
    }

    public static void drawCanvas1(Canvas canvas) {
        ShotButtonStyleKit.drawCanvas1(canvas, new RectF(0f, 0f, 240f, 120f), ResizingBehavior.AspectFit);
    }

    public static void drawCanvas1(Canvas canvas, RectF targetFrame, ResizingBehavior resizing) {
        // Resize to Target Frame
        canvas.save();
        RectF resizedFrame = CacheForCanvas1.resizedFrame;
        ShotButtonStyleKit.resizingBehaviorApply(resizing, CacheForCanvas1.originalFrame, targetFrame, resizedFrame);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 240f, resizedFrame.height() / 120f);

        // Empty.

        canvas.restore();
    }

    private static class CacheForShotButton {
        private static Paint paint = new Paint();
        private static RectF originalFrame = new RectF(0f, 0f, 30f, 30f);
        private static RectF resizedFrame = new RectF();
        private static RectF insideRect = new RectF();
        private static Path insidePath = new Path();
        private static RectF outsideRect = new RectF();
        private static Path outsidePath = new Path();
    }

    public static void drawShotButton(Canvas canvas,int arcRotation) {
        ShotButtonStyleKit.drawShotButton(canvas, new RectF(0f, 0f, 30f, 30f), ResizingBehavior.AspectFit,arcRotation);
    }

    public static void drawShotButton(Canvas canvas, RectF targetFrame, ResizingBehavior resizing,int arcRotation) {
        // General Declarations
        Paint paint = CacheForShotButton.paint;

        // Local Colors
        int strokeColor = Color.argb(255, 139, 195, 74);
        int fillColor2 = Color.argb(230, 255, 255, 255);
        // Resize to Target Frame
        canvas.save();


        RectF resizedFrame = CacheForShotButton.resizedFrame;
        ShotButtonStyleKit.resizingBehaviorApply(resizing, CacheForShotButton.originalFrame, targetFrame, resizedFrame);
        canvas.rotate(arcRotation);
        canvas.translate(resizedFrame.left, resizedFrame.top);
        canvas.scale(resizedFrame.width() / 30f, resizedFrame.height() / 30f);


        // Symbols
        {
            // ShotGroup
            {
                // inside
                RectF insideRect = CacheForShotButton.insideRect;
                insideRect.set(12.76f, 13.76f, 16.24f, 17.24f);
                Path insidePath = CacheForShotButton.insidePath;
                insidePath.reset();
                insidePath.addOval(insideRect, Path.Direction.CW);

                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStyle(Paint.Style.FILL);
                paint.setColor(fillColor2);
                canvas.drawPath(insidePath, paint);

                // outside
                RectF outsideRect = CacheForShotButton.outsideRect;
                outsideRect.set(6.49f, 7.49f, 22.51f, 23.51f);
                Path outsidePath = CacheForShotButton.outsidePath;
                outsidePath.reset();
                outsidePath.addArc(outsideRect, 225f, (360f * (float) Math.ceil(59f / 360f)) - 59f);

                paint.reset();
                paint.setFlags(Paint.ANTI_ALIAS_FLAG);
                paint.setStrokeWidth(0.5f);
                paint.setStrokeMiter(10f);
                canvas.save();
                paint.setStyle(Paint.Style.STROKE);
                paint.setColor(strokeColor);
                canvas.drawPath(outsidePath, paint);
                canvas.restore();
            }
        }

        canvas.restore();

    }


    // Resizing Behavior
    public static void resizingBehaviorApply(ResizingBehavior behavior, RectF rect, RectF target, RectF result) {
        if (rect.equals(target) || target == null) {
            result.set(rect);
            return;
        }

        if (behavior == ResizingBehavior.Stretch) {
            result.set(target);
            return;
        }

        float xRatio = Math.abs(target.width() / rect.width());
        float yRatio = Math.abs(target.height() / rect.height());
        float scale = 0f;

        switch (behavior) {
            case AspectFit: {
                scale = Math.min(xRatio, yRatio);
                break;
            }
            case AspectFill: {
                scale = Math.max(xRatio, yRatio);
                break;
            }
            case Center: {
                scale = 1f;
                break;
            }
        }

        float newWidth = Math.abs(rect.width() * scale);
        float newHeight = Math.abs(rect.height() * scale);
        result.set(target.centerX() - newWidth / 2,
                target.centerY() - newHeight / 2,
                target.centerX() + newWidth / 2,
                target.centerY() + newHeight / 2);
    }



}


